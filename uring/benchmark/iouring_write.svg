<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >IO uring buffered write</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>__vfprintf_internal (138 samples, 6.10%)</title><rect x="756.9" y="277" width="71.9" height="15.0" fill="rgb(211,3,13)" rx="2" ry="2" />
<text  x="759.88" y="287.5" >__vfprin..</text>
</g>
<g >
<title>bench_iouring_w (2,264 samples, 100.00%)</title><rect x="10.0" y="325" width="1180.0" height="15.0" fill="rgb(210,213,45)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >bench_iouring_w</text>
</g>
<g >
<title>_IO_no_init (2 samples, 0.09%)</title><rect x="98.1" y="261" width="1.0" height="15.0" fill="rgb(249,98,6)" rx="2" ry="2" />
<text  x="101.08" y="271.5" ></text>
</g>
<g >
<title>__vfprintf_internal (22 samples, 0.97%)</title><rect x="82.4" y="229" width="11.5" height="15.0" fill="rgb(242,138,1)" rx="2" ry="2" />
<text  x="85.45" y="239.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (2 samples, 0.09%)</title><rect x="1143.1" y="277" width="1.0" height="15.0" fill="rgb(244,83,12)" rx="2" ry="2" />
<text  x="1146.09" y="287.5" ></text>
</g>
<g >
<title>pick_next_task_fair (2 samples, 0.09%)</title><rect x="879.4" y="165" width="1.0" height="15.0" fill="rgb(254,229,12)" rx="2" ry="2" />
<text  x="882.36" y="175.5" ></text>
</g>
<g >
<title>__vfprintf_internal (17 samples, 0.75%)</title><rect x="105.9" y="245" width="8.9" height="15.0" fill="rgb(254,44,29)" rx="2" ry="2" />
<text  x="108.90" y="255.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="878.8" y="133" width="0.6" height="15.0" fill="rgb(243,112,11)" rx="2" ry="2" />
<text  x="881.84" y="143.5" ></text>
</g>
<g >
<title>_IO_no_init (37 samples, 1.63%)</title><rect x="178.3" y="293" width="19.3" height="15.0" fill="rgb(251,102,16)" rx="2" ry="2" />
<text  x="181.35" y="303.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (1 samples, 0.04%)</title><rect x="391.0" y="165" width="0.5" height="15.0" fill="rgb(249,86,10)" rx="2" ry="2" />
<text  x="394.00" y="175.5" ></text>
</g>
<g >
<title>__vsprintf_internal (39 samples, 1.72%)</title><rect x="10.5" y="197" width="20.3" height="15.0" fill="rgb(213,100,15)" rx="2" ry="2" />
<text  x="13.52" y="207.5" ></text>
</g>
<g >
<title>finish_task_switch (1 samples, 0.04%)</title><rect x="878.8" y="165" width="0.6" height="15.0" fill="rgb(213,30,39)" rx="2" ry="2" />
<text  x="881.84" y="175.5" ></text>
</g>
<g >
<title>schedule (12 samples, 0.53%)</title><rect x="875.7" y="197" width="6.3" height="15.0" fill="rgb(237,225,35)" rx="2" ry="2" />
<text  x="878.72" y="207.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (5 samples, 0.22%)</title><rect x="13.6" y="181" width="2.7" height="15.0" fill="rgb(209,161,35)" rx="2" ry="2" />
<text  x="16.65" y="191.5" ></text>
</g>
<g >
<title>_itoa_word (8 samples, 0.35%)</title><rect x="93.9" y="229" width="4.2" height="15.0" fill="rgb(224,146,45)" rx="2" ry="2" />
<text  x="96.91" y="239.5" ></text>
</g>
<g >
<title>_IO_no_init (6 samples, 0.27%)</title><rect x="123.1" y="277" width="3.1" height="15.0" fill="rgb(223,229,14)" rx="2" ry="2" />
<text  x="126.10" y="287.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (5 samples, 0.22%)</title><rect x="103.3" y="245" width="2.6" height="15.0" fill="rgb(227,33,4)" rx="2" ry="2" />
<text  x="106.30" y="255.5" ></text>
</g>
<g >
<title>rcu_core_si (1 samples, 0.04%)</title><rect x="878.8" y="85" width="0.6" height="15.0" fill="rgb(206,192,17)" rx="2" ry="2" />
<text  x="881.84" y="95.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (2 samples, 0.09%)</title><rect x="53.8" y="229" width="1.0" height="15.0" fill="rgb(237,168,12)" rx="2" ry="2" />
<text  x="56.78" y="239.5" ></text>
</g>
<g >
<title>_IO_no_init (1 samples, 0.04%)</title><rect x="53.3" y="229" width="0.5" height="15.0" fill="rgb(243,158,14)" rx="2" ry="2" />
<text  x="56.26" y="239.5" ></text>
</g>
<g >
<title>__do_sys_io_uring_enter (21 samples, 0.93%)</title><rect x="871.0" y="229" width="11.0" height="15.0" fill="rgb(207,125,51)" rx="2" ry="2" />
<text  x="874.02" y="239.5" ></text>
</g>
<g >
<title>cpuacct_charge (1 samples, 0.04%)</title><rect x="876.8" y="101" width="0.5" height="15.0" fill="rgb(223,28,48)" rx="2" ry="2" />
<text  x="879.76" y="111.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.04%)</title><rect x="1095.7" y="293" width="0.5" height="15.0" fill="rgb(239,221,40)" rx="2" ry="2" />
<text  x="1098.66" y="303.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (7 samples, 0.31%)</title><rect x="137.7" y="261" width="3.6" height="15.0" fill="rgb(241,163,0)" rx="2" ry="2" />
<text  x="140.69" y="271.5" ></text>
</g>
<g >
<title>switch_fpu_return (1 samples, 0.04%)</title><rect x="882.0" y="213" width="0.5" height="15.0" fill="rgb(232,222,6)" rx="2" ry="2" />
<text  x="884.97" y="223.5" ></text>
</g>
<g >
<title>[unknown] (83 samples, 3.67%)</title><rect x="10.0" y="229" width="43.3" height="15.0" fill="rgb(230,58,1)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >[unk..</text>
</g>
<g >
<title>_itoa_word (28 samples, 1.24%)</title><rect x="163.8" y="261" width="14.5" height="15.0" fill="rgb(232,193,54)" rx="2" ry="2" />
<text  x="166.75" y="271.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.04%)</title><rect x="54.8" y="229" width="0.5" height="15.0" fill="rgb(244,145,31)" rx="2" ry="2" />
<text  x="57.82" y="239.5" ></text>
</g>
<g >
<title>_itoa_word (13 samples, 0.57%)</title><rect x="828.8" y="277" width="6.8" height="15.0" fill="rgb(226,193,16)" rx="2" ry="2" />
<text  x="831.81" y="287.5" ></text>
</g>
<g >
<title>__vsnprintf_internal (675 samples, 29.81%)</title><rect x="310.7" y="293" width="351.8" height="15.0" fill="rgb(236,150,26)" rx="2" ry="2" />
<text  x="313.73" y="303.5" >__vsnprintf_internal</text>
</g>
<g >
<title>__fdget (1 samples, 0.04%)</title><rect x="873.6" y="213" width="0.6" height="15.0" fill="rgb(248,114,18)" rx="2" ry="2" />
<text  x="876.63" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.04%)</title><rect x="1095.7" y="277" width="0.5" height="15.0" fill="rgb(239,77,7)" rx="2" ry="2" />
<text  x="1098.66" y="287.5" ></text>
</g>
<g >
<title>dequeue_task (5 samples, 0.22%)</title><rect x="876.2" y="165" width="2.6" height="15.0" fill="rgb(216,154,36)" rx="2" ry="2" />
<text  x="879.24" y="175.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="391.0" y="261" width="0.5" height="15.0" fill="rgb(214,46,11)" rx="2" ry="2" />
<text  x="394.00" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.04%)</title><rect x="878.8" y="101" width="0.6" height="15.0" fill="rgb(220,131,1)" rx="2" ry="2" />
<text  x="881.84" y="111.5" ></text>
</g>
<g >
<title>do_exit (2 samples, 0.09%)</title><rect x="1143.1" y="245" width="1.0" height="15.0" fill="rgb(218,27,32)" rx="2" ry="2" />
<text  x="1146.09" y="255.5" ></text>
</g>
<g >
<title>_itoa_word (14 samples, 0.62%)</title><rect x="114.8" y="245" width="7.3" height="15.0" fill="rgb(251,121,22)" rx="2" ry="2" />
<text  x="117.76" y="255.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.04%)</title><rect x="1143.6" y="213" width="0.5" height="15.0" fill="rgb(226,98,6)" rx="2" ry="2" />
<text  x="1146.61" y="223.5" ></text>
</g>
<g >
<title>__fget_light (1 samples, 0.04%)</title><rect x="873.6" y="197" width="0.6" height="15.0" fill="rgb(206,163,25)" rx="2" ry="2" />
<text  x="876.63" y="207.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.04%)</title><rect x="30.8" y="213" width="0.6" height="15.0" fill="rgb(209,123,8)" rx="2" ry="2" />
<text  x="33.85" y="223.5" ></text>
</g>
<g >
<title>__vsprintf_internal (42 samples, 1.86%)</title><rect x="31.4" y="213" width="21.9" height="15.0" fill="rgb(247,95,6)" rx="2" ry="2" />
<text  x="34.37" y="223.5" >_..</text>
</g>
<g >
<title>__snprintf (28 samples, 1.24%)</title><rect x="290.9" y="293" width="14.6" height="15.0" fill="rgb(222,49,11)" rx="2" ry="2" />
<text  x="293.93" y="303.5" ></text>
</g>
<g >
<title>_io_uring_get_cqe (8 samples, 0.35%)</title><rect x="1129.0" y="309" width="4.2" height="15.0" fill="rgb(242,21,34)" rx="2" ry="2" />
<text  x="1132.02" y="319.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (2 samples, 0.09%)</title><rect x="882.0" y="245" width="1.0" height="15.0" fill="rgb(223,124,46)" rx="2" ry="2" />
<text  x="884.97" y="255.5" ></text>
</g>
<g >
<title>__vfprintf_internal (19 samples, 0.84%)</title><rect x="60.0" y="213" width="9.9" height="15.0" fill="rgb(243,85,8)" rx="2" ry="2" />
<text  x="63.04" y="223.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (2 samples, 0.09%)</title><rect x="122.1" y="277" width="1.0" height="15.0" fill="rgb(213,107,45)" rx="2" ry="2" />
<text  x="125.06" y="287.5" ></text>
</g>
<g >
<title>cfree@GLIBC_2.2.5 (19 samples, 0.84%)</title><rect x="1133.2" y="309" width="9.9" height="15.0" fill="rgb(242,12,21)" rx="2" ry="2" />
<text  x="1136.19" y="319.5" ></text>
</g>
<g >
<title>__vsprintf_internal (41 samples, 1.81%)</title><rect x="55.3" y="229" width="21.4" height="15.0" fill="rgb(227,176,40)" rx="2" ry="2" />
<text  x="58.34" y="239.5" >_..</text>
</g>
<g >
<title>__strchrnul_avx2 (72 samples, 3.18%)</title><rect x="391.5" y="277" width="37.5" height="15.0" fill="rgb(246,45,51)" rx="2" ry="2" />
<text  x="394.52" y="287.5" >__s..</text>
</g>
<g >
<title>_itoa_word (14 samples, 0.62%)</title><rect x="23.6" y="181" width="7.2" height="15.0" fill="rgb(231,225,30)" rx="2" ry="2" />
<text  x="26.55" y="191.5" ></text>
</g>
<g >
<title>[unknown] (128 samples, 5.65%)</title><rect x="10.0" y="245" width="66.7" height="15.0" fill="rgb(206,2,52)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >[unknown]</text>
</g>
<g >
<title>psi_group_change (2 samples, 0.09%)</title><rect x="880.4" y="149" width="1.0" height="15.0" fill="rgb(231,47,32)" rx="2" ry="2" />
<text  x="883.41" y="159.5" ></text>
</g>
<g >
<title>remove_vma (1 samples, 0.04%)</title><rect x="1143.6" y="197" width="0.5" height="15.0" fill="rgb(229,227,38)" rx="2" ry="2" />
<text  x="1146.61" y="207.5" ></text>
</g>
<g >
<title>__strlen_avx2 (55 samples, 2.43%)</title><rect x="429.0" y="277" width="28.7" height="15.0" fill="rgb(229,152,47)" rx="2" ry="2" />
<text  x="432.05" y="287.5" >__..</text>
</g>
<g >
<title>prepare_to_wait_exclusive (2 samples, 0.09%)</title><rect x="874.2" y="213" width="1.0" height="15.0" fill="rgb(234,155,13)" rx="2" ry="2" />
<text  x="877.15" y="223.5" ></text>
</g>
<g >
<title>dequeue_entity (3 samples, 0.13%)</title><rect x="876.8" y="133" width="1.5" height="15.0" fill="rgb(245,49,48)" rx="2" ry="2" />
<text  x="879.76" y="143.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.04%)</title><rect x="391.0" y="117" width="0.5" height="15.0" fill="rgb(252,194,2)" rx="2" ry="2" />
<text  x="394.00" y="127.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (2 samples, 0.09%)</title><rect x="59.0" y="213" width="1.0" height="15.0" fill="rgb(207,220,53)" rx="2" ry="2" />
<text  x="61.99" y="223.5" ></text>
</g>
<g >
<title>[unknown] (169 samples, 7.46%)</title><rect x="10.0" y="261" width="88.1" height="15.0" fill="rgb(217,153,25)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >[unknown]</text>
</g>
<g >
<title>_itoa_word (94 samples, 4.15%)</title><rect x="613.6" y="277" width="48.9" height="15.0" fill="rgb(213,194,20)" rx="2" ry="2" />
<text  x="616.55" y="287.5" >_ito..</text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (77 samples, 3.40%)</title><rect x="1054.0" y="309" width="40.1" height="15.0" fill="rgb(242,158,43)" rx="2" ry="2" />
<text  x="1056.97" y="319.5" >__m..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (24 samples, 1.06%)</title><rect x="870.5" y="277" width="12.5" height="15.0" fill="rgb(214,47,43)" rx="2" ry="2" />
<text  x="873.50" y="287.5" ></text>
</g>
<g >
<title>__io_uring_get_cqe (20 samples, 0.88%)</title><rect x="1043.5" y="309" width="10.5" height="15.0" fill="rgb(250,169,24)" rx="2" ry="2" />
<text  x="1046.54" y="319.5" ></text>
</g>
<g >
<title>__vfprintf_internal (1 samples, 0.04%)</title><rect x="78.3" y="245" width="0.5" height="15.0" fill="rgb(227,193,52)" rx="2" ry="2" />
<text  x="81.28" y="255.5" ></text>
</g>
<g >
<title>__vfprintf_internal (43 samples, 1.90%)</title><rect x="141.3" y="261" width="22.5" height="15.0" fill="rgb(228,4,52)" rx="2" ry="2" />
<text  x="144.34" y="271.5" >_..</text>
</g>
<g >
<title>__vsprintf_internal (89 samples, 3.93%)</title><rect x="132.0" y="277" width="46.3" height="15.0" fill="rgb(241,85,6)" rx="2" ry="2" />
<text  x="134.96" y="287.5" >__vs..</text>
</g>
<g >
<title>_IO_default_xsputn (40 samples, 1.77%)</title><rect x="681.3" y="277" width="20.9" height="15.0" fill="rgb(244,63,13)" rx="2" ry="2" />
<text  x="684.31" y="287.5" ></text>
</g>
<g >
<title>_itoa_word (13 samples, 0.57%)</title><rect x="69.9" y="213" width="6.8" height="15.0" fill="rgb(206,126,40)" rx="2" ry="2" />
<text  x="72.94" y="223.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (5 samples, 0.22%)</title><rect x="135.1" y="261" width="2.6" height="15.0" fill="rgb(208,68,1)" rx="2" ry="2" />
<text  x="138.09" y="271.5" ></text>
</g>
<g >
<title>sprintf (18 samples, 0.80%)</title><rect x="903.3" y="293" width="9.4" height="15.0" fill="rgb(238,196,25)" rx="2" ry="2" />
<text  x="906.34" y="303.5" ></text>
</g>
<g >
<title>_IO_setb (61 samples, 2.69%)</title><rect x="1011.7" y="309" width="31.8" height="15.0" fill="rgb(248,219,35)" rx="2" ry="2" />
<text  x="1014.75" y="319.5" >_I..</text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="391.0" y="229" width="0.5" height="15.0" fill="rgb(231,10,17)" rx="2" ry="2" />
<text  x="394.00" y="239.5" ></text>
</g>
<g >
<title>rcu_core (1 samples, 0.04%)</title><rect x="878.8" y="69" width="0.6" height="15.0" fill="rgb(227,156,50)" rx="2" ry="2" />
<text  x="881.84" y="79.5" ></text>
</g>
<g >
<title>update_curr (1 samples, 0.04%)</title><rect x="876.8" y="117" width="0.5" height="15.0" fill="rgb(242,12,38)" rx="2" ry="2" />
<text  x="879.76" y="127.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (3 samples, 0.13%)</title><rect x="80.9" y="229" width="1.5" height="15.0" fill="rgb(227,90,34)" rx="2" ry="2" />
<text  x="83.88" y="239.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (37 samples, 1.63%)</title><rect x="244.0" y="293" width="19.3" height="15.0" fill="rgb(247,180,34)" rx="2" ry="2" />
<text  x="247.02" y="303.5" ></text>
</g>
<g >
<title>_exit (1 samples, 0.04%)</title><rect x="1095.7" y="309" width="0.5" height="15.0" fill="rgb(233,180,32)" rx="2" ry="2" />
<text  x="1098.66" y="319.5" ></text>
</g>
<g >
<title>__vsprintf_internal (37 samples, 1.63%)</title><rect x="78.8" y="245" width="19.3" height="15.0" fill="rgb(210,95,54)" rx="2" ry="2" />
<text  x="81.80" y="255.5" ></text>
</g>
<g >
<title>__switch_to (1 samples, 0.04%)</title><rect x="870.0" y="277" width="0.5" height="15.0" fill="rgb(223,5,18)" rx="2" ry="2" />
<text  x="872.98" y="287.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.04%)</title><rect x="1095.7" y="261" width="0.5" height="15.0" fill="rgb(253,57,37)" rx="2" ry="2" />
<text  x="1098.66" y="271.5" ></text>
</g>
<g >
<title>__vfprintf_internal (14 samples, 0.62%)</title><rect x="16.3" y="181" width="7.3" height="15.0" fill="rgb(236,162,5)" rx="2" ry="2" />
<text  x="19.25" y="191.5" ></text>
</g>
<g >
<title>all (2,264 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(219,5,16)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>wake_up_state (1 samples, 0.04%)</title><rect x="1095.7" y="197" width="0.5" height="15.0" fill="rgb(246,114,12)" rx="2" ry="2" />
<text  x="1098.66" y="207.5" ></text>
</g>
<g >
<title>fput (1 samples, 0.04%)</title><rect x="1143.6" y="165" width="0.5" height="15.0" fill="rgb(222,12,32)" rx="2" ry="2" />
<text  x="1146.61" y="175.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (3 samples, 0.13%)</title><rect x="32.9" y="197" width="1.6" height="15.0" fill="rgb(216,70,18)" rx="2" ry="2" />
<text  x="35.93" y="207.5" ></text>
</g>
<g >
<title>main (17 samples, 0.75%)</title><rect x="1153.5" y="309" width="8.9" height="15.0" fill="rgb(231,151,18)" rx="2" ry="2" />
<text  x="1156.52" y="319.5" ></text>
</g>
<g >
<title>[unknown] (40 samples, 1.77%)</title><rect x="10.0" y="213" width="20.8" height="15.0" fill="rgb(247,126,45)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>vma_do_fput (1 samples, 0.04%)</title><rect x="1143.6" y="181" width="0.5" height="15.0" fill="rgb(216,186,34)" rx="2" ry="2" />
<text  x="1146.61" y="191.5" ></text>
</g>
<g >
<title>__vsprintf_internal (332 samples, 14.66%)</title><rect x="662.5" y="293" width="173.1" height="15.0" fill="rgb(231,198,30)" rx="2" ry="2" />
<text  x="665.54" y="303.5" >__vsprintf_internal</text>
</g>
<g >
<title>free@plt (1 samples, 0.04%)</title><rect x="1144.1" y="309" width="0.6" height="15.0" fill="rgb(241,109,41)" rx="2" ry="2" />
<text  x="1147.13" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.09%)</title><rect x="1143.1" y="309" width="1.0" height="15.0" fill="rgb(237,59,51)" rx="2" ry="2" />
<text  x="1146.09" y="319.5" ></text>
</g>
<g >
<title>do_syscall_64 (23 samples, 1.02%)</title><rect x="871.0" y="261" width="12.0" height="15.0" fill="rgb(233,82,13)" rx="2" ry="2" />
<text  x="874.02" y="271.5" ></text>
</g>
<g >
<title>do_group_exit (2 samples, 0.09%)</title><rect x="1143.1" y="261" width="1.0" height="15.0" fill="rgb(235,161,8)" rx="2" ry="2" />
<text  x="1146.09" y="271.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (46 samples, 2.03%)</title><rect x="367.5" y="277" width="24.0" height="15.0" fill="rgb(221,18,46)" rx="2" ry="2" />
<text  x="370.54" y="287.5" >_..</text>
</g>
<g >
<title>__vfprintf_internal (299 samples, 13.21%)</title><rect x="457.7" y="277" width="155.9" height="15.0" fill="rgb(210,204,52)" rx="2" ry="2" />
<text  x="460.71" y="287.5" >__vfprintf_internal</text>
</g>
<g >
<title>_IO_old_init (84 samples, 3.71%)</title><rect x="197.6" y="293" width="43.8" height="15.0" fill="rgb(249,67,8)" rx="2" ry="2" />
<text  x="200.63" y="303.5" >_IO_..</text>
</g>
<g >
<title>__mempcpy_avx_unaligned_erms (3 samples, 0.13%)</title><rect x="1094.1" y="309" width="1.6" height="15.0" fill="rgb(232,199,1)" rx="2" ry="2" />
<text  x="1097.10" y="319.5" ></text>
</g>
<g >
<title>try_to_wake_up (1 samples, 0.04%)</title><rect x="1095.7" y="181" width="0.5" height="15.0" fill="rgb(236,116,27)" rx="2" ry="2" />
<text  x="1098.66" y="191.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="878.8" y="149" width="0.6" height="15.0" fill="rgb(206,97,54)" rx="2" ry="2" />
<text  x="881.84" y="159.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (2 samples, 0.09%)</title><rect x="102.3" y="245" width="1.0" height="15.0" fill="rgb(210,72,10)" rx="2" ry="2" />
<text  x="105.25" y="255.5" ></text>
</g>
<g >
<title>_IO_old_init (9 samples, 0.40%)</title><rect x="126.2" y="277" width="4.7" height="15.0" fill="rgb(207,139,2)" rx="2" ry="2" />
<text  x="129.23" y="287.5" ></text>
</g>
<g >
<title>_raw_spin_lock_irqsave (2 samples, 0.09%)</title><rect x="874.2" y="197" width="1.0" height="15.0" fill="rgb(217,215,17)" rx="2" ry="2" />
<text  x="877.15" y="207.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.04%)</title><rect x="878.8" y="117" width="0.6" height="15.0" fill="rgb(208,64,53)" rx="2" ry="2" />
<text  x="881.84" y="127.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.04%)</title><rect x="391.0" y="133" width="0.5" height="15.0" fill="rgb(250,187,26)" rx="2" ry="2" />
<text  x="394.00" y="143.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (2 samples, 0.09%)</title><rect x="130.9" y="277" width="1.1" height="15.0" fill="rgb(223,89,43)" rx="2" ry="2" />
<text  x="133.92" y="287.5" ></text>
</g>
<g >
<title>newidle_balance (1 samples, 0.04%)</title><rect x="879.9" y="149" width="0.5" height="15.0" fill="rgb(238,196,30)" rx="2" ry="2" />
<text  x="882.89" y="159.5" ></text>
</g>
<g >
<title>mm_update_next_owner (1 samples, 0.04%)</title><rect x="1143.1" y="229" width="0.5" height="15.0" fill="rgb(254,186,13)" rx="2" ry="2" />
<text  x="1146.09" y="239.5" ></text>
</g>
<g >
<title>[unknown] (1,732 samples, 76.50%)</title><rect x="10.0" y="309" width="902.7" height="15.0" fill="rgb(242,8,18)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >[unknown]</text>
</g>
<g >
<title>__sched_text_start (12 samples, 0.53%)</title><rect x="875.7" y="181" width="6.3" height="15.0" fill="rgb(244,62,30)" rx="2" ry="2" />
<text  x="878.72" y="191.5" ></text>
</g>
<g >
<title>_io_uring_get_cqe (40 samples, 1.77%)</title><rect x="862.2" y="293" width="20.8" height="15.0" fill="rgb(234,102,42)" rx="2" ry="2" />
<text  x="865.16" y="303.5" ></text>
</g>
<g >
<title>update_load_avg (2 samples, 0.09%)</title><rect x="877.3" y="117" width="1.0" height="15.0" fill="rgb(247,114,31)" rx="2" ry="2" />
<text  x="880.28" y="127.5" ></text>
</g>
<g >
<title>__io_uring_submit (7 samples, 0.31%)</title><rect x="287.3" y="293" width="3.6" height="15.0" fill="rgb(235,127,20)" rx="2" ry="2" />
<text  x="290.28" y="303.5" ></text>
</g>
<g >
<title>_itoa_word (12 samples, 0.53%)</title><rect x="47.0" y="197" width="6.3" height="15.0" fill="rgb(243,168,19)" rx="2" ry="2" />
<text  x="50.01" y="207.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (3 samples, 0.13%)</title><rect x="79.3" y="229" width="1.6" height="15.0" fill="rgb(218,145,32)" rx="2" ry="2" />
<text  x="82.32" y="239.5" ></text>
</g>
<g >
<title>_IO_setb (5 samples, 0.22%)</title><rect x="241.4" y="293" width="2.6" height="15.0" fill="rgb(211,65,13)" rx="2" ry="2" />
<text  x="244.41" y="303.5" ></text>
</g>
<g >
<title>__vfprintf_internal (10 samples, 0.44%)</title><rect x="305.5" y="293" width="5.2" height="15.0" fill="rgb(253,48,25)" rx="2" ry="2" />
<text  x="308.52" y="303.5" ></text>
</g>
<g >
<title>__x64_sys_io_uring_enter (21 samples, 0.93%)</title><rect x="871.0" y="245" width="11.0" height="15.0" fill="rgb(207,177,47)" rx="2" ry="2" />
<text  x="874.02" y="255.5" ></text>
</g>
<g >
<title>schedule_timeout (13 samples, 0.57%)</title><rect x="875.2" y="213" width="6.8" height="15.0" fill="rgb(209,48,23)" rx="2" ry="2" />
<text  x="878.19" y="223.5" ></text>
</g>
<g >
<title>__io_uring_flush_sq (46 samples, 2.03%)</title><rect x="263.3" y="293" width="24.0" height="15.0" fill="rgb(216,225,8)" rx="2" ry="2" />
<text  x="266.30" y="303.5" >_..</text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.04%)</title><rect x="391.0" y="197" width="0.5" height="15.0" fill="rgb(212,196,1)" rx="2" ry="2" />
<text  x="394.00" y="207.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (9 samples, 0.40%)</title><rect x="362.9" y="277" width="4.6" height="15.0" fill="rgb(251,105,6)" rx="2" ry="2" />
<text  x="365.85" y="287.5" ></text>
</g>
<g >
<title>do_group_exit (1 samples, 0.04%)</title><rect x="1095.7" y="245" width="0.5" height="15.0" fill="rgb(213,93,43)" rx="2" ry="2" />
<text  x="1098.66" y="255.5" ></text>
</g>
<g >
<title>malloc (53 samples, 2.34%)</title><rect x="1162.4" y="309" width="27.6" height="15.0" fill="rgb(253,23,43)" rx="2" ry="2" />
<text  x="1165.38" y="319.5" >m..</text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.04%)</title><rect x="391.0" y="213" width="0.5" height="15.0" fill="rgb(250,185,42)" rx="2" ry="2" />
<text  x="394.00" y="223.5" ></text>
</g>
<g >
<title>mmput (1 samples, 0.04%)</title><rect x="1143.6" y="229" width="0.5" height="15.0" fill="rgb(243,123,9)" rx="2" ry="2" />
<text  x="1146.61" y="239.5" ></text>
</g>
<g >
<title>[unknown] (323 samples, 14.27%)</title><rect x="10.0" y="293" width="168.3" height="15.0" fill="rgb(213,104,10)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >[unknown]</text>
</g>
<g >
<title>_int_free (51 samples, 2.25%)</title><rect x="835.6" y="293" width="26.6" height="15.0" fill="rgb(233,47,42)" rx="2" ry="2" />
<text  x="838.58" y="303.5" >_..</text>
</g>
<g >
<title>__strchrnul_avx2 (7 samples, 0.31%)</title><rect x="34.5" y="197" width="3.6" height="15.0" fill="rgb(235,89,3)" rx="2" ry="2" />
<text  x="37.50" y="207.5" ></text>
</g>
<g >
<title>__vsprintf_internal (43 samples, 1.90%)</title><rect x="99.6" y="261" width="22.5" height="15.0" fill="rgb(230,131,19)" rx="2" ry="2" />
<text  x="102.65" y="271.5" >_..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.04%)</title><rect x="882.0" y="229" width="0.5" height="15.0" fill="rgb(250,160,8)" rx="2" ry="2" />
<text  x="884.97" y="239.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.04%)</title><rect x="10.0" y="197" width="0.5" height="15.0" fill="rgb(217,66,36)" rx="2" ry="2" />
<text  x="13.00" y="207.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (3 samples, 0.13%)</title><rect x="57.4" y="213" width="1.6" height="15.0" fill="rgb(213,209,36)" rx="2" ry="2" />
<text  x="60.43" y="223.5" ></text>
</g>
<g >
<title>_IO_str_init_static_internal (1 samples, 0.04%)</title><rect x="99.1" y="261" width="0.5" height="15.0" fill="rgb(214,71,15)" rx="2" ry="2" />
<text  x="102.13" y="271.5" ></text>
</g>
<g >
<title>io_uring_get_sqe (17 samples, 0.75%)</title><rect x="1144.7" y="309" width="8.8" height="15.0" fill="rgb(217,43,17)" rx="2" ry="2" />
<text  x="1147.66" y="319.5" ></text>
</g>
<g >
<title>io_uring_submit (2 samples, 0.09%)</title><rect x="883.0" y="293" width="1.1" height="15.0" fill="rgb(222,207,0)" rx="2" ry="2" />
<text  x="886.01" y="303.5" ></text>
</g>
<g >
<title>_int_malloc (46 samples, 2.03%)</title><rect x="1105.0" y="309" width="24.0" height="15.0" fill="rgb(211,218,18)" rx="2" ry="2" />
<text  x="1108.04" y="319.5" >_..</text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.04%)</title><rect x="391.0" y="181" width="0.5" height="15.0" fill="rgb(212,205,29)" rx="2" ry="2" />
<text  x="394.00" y="191.5" ></text>
</g>
<g >
<title>__update_load_avg_se (1 samples, 0.04%)</title><rect x="877.8" y="101" width="0.5" height="15.0" fill="rgb(248,127,27)" rx="2" ry="2" />
<text  x="880.80" y="111.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.04%)</title><rect x="391.0" y="245" width="0.5" height="15.0" fill="rgb(228,40,22)" rx="2" ry="2" />
<text  x="394.00" y="255.5" ></text>
</g>
<g >
<title>[libc-2.31.so] (3 samples, 0.13%)</title><rect x="679.7" y="277" width="1.6" height="15.0" fill="rgb(251,167,54)" rx="2" ry="2" />
<text  x="682.74" y="287.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.09%)</title><rect x="1143.1" y="293" width="1.0" height="15.0" fill="rgb(207,51,6)" rx="2" ry="2" />
<text  x="1146.09" y="303.5" ></text>
</g>
<g >
<title>set_next_task_idle (1 samples, 0.04%)</title><rect x="881.4" y="165" width="0.6" height="15.0" fill="rgb(226,17,47)" rx="2" ry="2" />
<text  x="884.45" y="175.5" ></text>
</g>
<g >
<title>_IO_no_init (1 samples, 0.04%)</title><rect x="76.7" y="245" width="0.5" height="15.0" fill="rgb(219,64,20)" rx="2" ry="2" />
<text  x="79.71" y="255.5" ></text>
</g>
<g >
<title>signal_wake_up_state (1 samples, 0.04%)</title><rect x="1095.7" y="213" width="0.5" height="15.0" fill="rgb(241,21,7)" rx="2" ry="2" />
<text  x="1098.66" y="223.5" ></text>
</g>
<g >
<title>zap_other_threads (1 samples, 0.04%)</title><rect x="1095.7" y="229" width="0.5" height="15.0" fill="rgb(226,4,19)" rx="2" ry="2" />
<text  x="1098.66" y="239.5" ></text>
</g>
<g >
<title>__fget_files (1 samples, 0.04%)</title><rect x="873.6" y="181" width="0.6" height="15.0" fill="rgb(229,196,40)" rx="2" ry="2" />
<text  x="876.63" y="191.5" ></text>
</g>
<g >
<title>__vfprintf_internal (17 samples, 0.75%)</title><rect x="38.1" y="197" width="8.9" height="15.0" fill="rgb(252,104,54)" rx="2" ry="2" />
<text  x="41.14" y="207.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (190 samples, 8.39%)</title><rect x="912.7" y="309" width="99.0" height="15.0" fill="rgb(250,146,30)" rx="2" ry="2" />
<text  x="915.72" y="319.5" >_IO_default..</text>
</g>
<g >
<title>_IO_str_init_static_internal (2 samples, 0.09%)</title><rect x="77.2" y="245" width="1.1" height="15.0" fill="rgb(224,72,0)" rx="2" ry="2" />
<text  x="80.23" y="255.5" ></text>
</g>
<g >
<title>main (26 samples, 1.15%)</title><rect x="884.1" y="293" width="13.5" height="15.0" fill="rgb(205,109,43)" rx="2" ry="2" />
<text  x="887.05" y="303.5" ></text>
</g>
<g >
<title>rcu_do_batch (1 samples, 0.04%)</title><rect x="878.8" y="53" width="0.6" height="15.0" fill="rgb(252,49,33)" rx="2" ry="2" />
<text  x="881.84" y="63.5" ></text>
</g>
<g >
<title>rcu_cblist_dequeue (1 samples, 0.04%)</title><rect x="878.8" y="37" width="0.6" height="15.0" fill="rgb(228,160,5)" rx="2" ry="2" />
<text  x="881.84" y="47.5" ></text>
</g>
<g >
<title>[unknown] (215 samples, 9.50%)</title><rect x="10.0" y="277" width="112.1" height="15.0" fill="rgb(250,130,47)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >[unknown]</text>
</g>
<g >
<title>__cond_resched (1 samples, 0.04%)</title><rect x="873.1" y="213" width="0.5" height="15.0" fill="rgb(212,147,39)" rx="2" ry="2" />
<text  x="876.11" y="223.5" ></text>
</g>
<g >
<title>_IO_default_xsputn (2 samples, 0.09%)</title><rect x="12.6" y="181" width="1.0" height="15.0" fill="rgb(246,113,35)" rx="2" ry="2" />
<text  x="15.61" y="191.5" ></text>
</g>
<g >
<title>__strchrnul_avx2 (59 samples, 2.61%)</title><rect x="702.2" y="277" width="30.7" height="15.0" fill="rgb(231,119,16)" rx="2" ry="2" />
<text  x="705.16" y="287.5" >__..</text>
</g>
<g >
<title>__accumulate_pelt_segments (1 samples, 0.04%)</title><rect x="877.8" y="85" width="0.5" height="15.0" fill="rgb(206,204,9)" rx="2" ry="2" />
<text  x="880.80" y="95.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.04%)</title><rect x="391.0" y="149" width="0.5" height="15.0" fill="rgb(235,206,4)" rx="2" ry="2" />
<text  x="394.00" y="159.5" ></text>
</g>
<g >
<title>update_cfs_group (1 samples, 0.04%)</title><rect x="878.3" y="133" width="0.5" height="15.0" fill="rgb(224,7,50)" rx="2" ry="2" />
<text  x="881.32" y="143.5" ></text>
</g>
<g >
<title>dequeue_task_fair (5 samples, 0.22%)</title><rect x="876.2" y="149" width="2.6" height="15.0" fill="rgb(223,175,34)" rx="2" ry="2" />
<text  x="879.24" y="159.5" ></text>
</g>
<g >
<title>psi_task_switch (2 samples, 0.09%)</title><rect x="880.4" y="165" width="1.0" height="15.0" fill="rgb(248,200,11)" rx="2" ry="2" />
<text  x="883.41" y="175.5" ></text>
</g>
<g >
<title>__strlen_avx2 (46 samples, 2.03%)</title><rect x="732.9" y="277" width="24.0" height="15.0" fill="rgb(249,15,33)" rx="2" ry="2" />
<text  x="735.91" y="287.5" >_..</text>
</g>
<g >
<title>switch_fpu_return (1 samples, 0.04%)</title><rect x="882.5" y="229" width="0.5" height="15.0" fill="rgb(211,181,34)" rx="2" ry="2" />
<text  x="885.49" y="239.5" ></text>
</g>
<g >
<title>malloc (11 samples, 0.49%)</title><rect x="897.6" y="293" width="5.7" height="15.0" fill="rgb(248,184,16)" rx="2" ry="2" />
<text  x="900.61" y="303.5" ></text>
</g>
<g >
<title>_int_free (17 samples, 0.75%)</title><rect x="1096.2" y="309" width="8.8" height="15.0" fill="rgb(219,19,19)" rx="2" ry="2" />
<text  x="1099.18" y="319.5" ></text>
</g>
</g>
</svg>
